[{"name":"app.R","content":"# Launch the ShinyApp (Do not remove this comment)\n# To deploy, run: rsconnect::deployApp()\n# Or use the blue button on top of this file\n\npkgload::load_all(export_all = FALSE,helpers = FALSE,attach_testthat = FALSE)\noptions( \"golem.app.prod\" = TRUE)\ndiag::run_app() # add parameters here (if any)\n","type":"text"},{"name":"DESCRIPTION","content":"Package: diag\nTitle: An Amazing Shiny App\nVersion: 0.0.0.9000\nAuthors@R: \n    person(given = \"firstname\",\n           family = \"lastname\",\n           role = c(\"aut\", \"cre\"),\n           email = \"your@email.com\")\nDescription: What the package does (one paragraph).\nLicense: What license is it under?\nImports: \n    config,\n    golem,\n    pkgload,\n    shiny\nEncoding: UTF-8\nLazyData: true\nRoxygenNote: 7.1.1\nSuggests: \n    spelling,\n    testthat (>= 3.0.0)\nConfig/testthat/edition: 3\nLanguage: en-US\n","type":"text"},{"name":"NAMESPACE","content":"# Generated by roxygen2: do not edit by hand\n\nexport(run_app)\nimport(shiny)\nimportFrom(golem,activate_js)\nimportFrom(golem,add_resource_path)\nimportFrom(golem,bundle_resources)\nimportFrom(golem,favicon)\nimportFrom(golem,with_golem_options)\nimportFrom(shiny,shinyApp)\n","type":"text"},{"name":"R/_disable_autoload.R","content":"# Disabling shiny autoload\n\n# See ?shiny::loadSupport for more information\n","type":"text"},{"name":"R/app_config.R","content":"#' Access files in the current app\n#'\n#' NOTE: If you manually change your package name in the DESCRIPTION,\n#' don't forget to change it here too, and in the config file.\n#' For a safer name change mechanism, use the `golem::set_golem_name()` function.\n#'\n#' @param ... character vectors, specifying subdirectory and file(s)\n#' within your package. The default, none, returns the root of the app.\n#'\n#' @noRd\napp_sys <- function(...) {\n  system.file(..., package = \"diag\")\n}\n\n\n#' Read App Config\n#'\n#' @param value Value to retrieve from the config file.\n#' @param config GOLEM_CONFIG_ACTIVE value. If unset, R_CONFIG_ACTIVE.\n#' If unset, \"default\".\n#' @param use_parent Logical, scan the parent directory for config file.\n#' @param file Location of the config file\n#'\n#' @noRd\nget_golem_config <- function(\n  value,\n  config = Sys.getenv(\n    \"GOLEM_CONFIG_ACTIVE\",\n    Sys.getenv(\n      \"R_CONFIG_ACTIVE\",\n      \"default\"\n    )\n  ),\n  use_parent = TRUE,\n  # Modify this if your config file is somewhere else\n  file = app_sys(\"golem-config.yml\")\n) {\n  config::get(\n    value = value,\n    config = config,\n    file = file,\n    use_parent = use_parent\n  )\n}\n","type":"text"},{"name":"R/app_server.R","content":"#' The application server-side\n#'\n#' @param input,output,session Internal parameters for {shiny}.\n#'     DO NOT REMOVE.\n#' @import shiny\n#' @noRd\napp_server <- function(input, output, session) {\n  # Your application server logic\n}\n","type":"text"},{"name":"R/app_ui.R","content":"#' The application User-Interface\n#'\n#' @param request Internal parameter for `{shiny}`.\n#'     DO NOT REMOVE.\n#' @import shiny\n#' @noRd\napp_ui <- function(request) {\n  tagList(\n    # Leave this function for adding external resources\n    golem_add_external_resources(),\n    # Your application UI logic\n    fluidPage(\n      golem::golem_welcome_page() # Remove this line to start building your UI\n    )\n  )\n}\n\n#' Add external Resources to the Application\n#'\n#' This function is internally used to add external\n#' resources inside the Shiny application.\n#'\n#' @import shiny\n#' @importFrom golem add_resource_path activate_js favicon bundle_resources\n#' @noRd\ngolem_add_external_resources <- function() {\n  add_resource_path(\n    \"www\",\n    app_sys(\"app/www\")\n  )\n\n  tags$head(\n    favicon(),\n    bundle_resources(\n      path = app_sys(\"app/www\"),\n      app_title = \"diag\"\n    )\n    # Add here other external resources\n    # for example, you can add shinyalert::useShinyalert()\n  )\n}\n","type":"text"},{"name":"R/run_app.R","content":"#' Run the Shiny Application\n#'\n#' @param ... arguments to pass to golem_opts.\n#' See `?golem::get_golem_options` for more details.\n#' @inheritParams shiny::shinyApp\n#'\n#' @export\n#' @importFrom shiny shinyApp\n#' @importFrom golem with_golem_options\nrun_app <- function(\n  onStart = NULL,\n  options = list(),\n  enableBookmarking = NULL,\n  uiPattern = \"/\",\n  ...\n) {\n  with_golem_options(\n    app = shinyApp(\n      ui = app_ui,\n      server = app_server,\n      onStart = onStart,\n      options = options,\n      enableBookmarking = enableBookmarking,\n      uiPattern = uiPattern\n    ),\n    golem_opts = list(...)\n  )\n}\n","type":"text"},{"name":"dev/01_start.R","content":"# Building a Prod-Ready, Robust Shiny Application.\n#\n# README: each step of the dev files is optional, and you don't have to\n# fill every dev scripts before getting started.\n# 01_start.R should be filled at start.\n# 02_dev.R should be used to keep track of your development during the project.\n# 03_deploy.R should be used once you need to deploy your app.\n#\n#\n########################################\n#### CURRENT FILE: ON START SCRIPT #####\n########################################\n\n## Fill the DESCRIPTION ----\n## Add meta data about your application and set some default {golem} options\n##\n## /!\\ Note: if you want to change the name of your app during development,\n## either re-run this function, call golem::set_golem_name(), or don't forget\n## to change the name in the app_sys() function in app_config.R /!\\\n##\ngolem::fill_desc(\n  pkg_name = \"diag\", # The name of the golem package containing the app (typically lowercase, no underscore or periods)\n  pkg_title = \"PKG_TITLE\", # What the Package Does (One Line, Title Case, No Period)\n  pkg_description = \"PKG_DESC.\", # What the package does (one paragraph).\n  authors = person(\n    given = \"AUTHOR_FIRST\", # Your First Name\n    family = \"AUTHOR_LAST\", # Your Last Name\n    email = \"AUTHOR@MAIL.COM\", # Your email\n    role = c(\"aut\", \"cre\") # Your role (here author/creator)\n  ),\n  repo_url = NULL, # The URL of the GitHub repo (optional),\n  pkg_version = \"0.0.0.9000\", # The version of the package containing the app\n  set_options = TRUE # Set the global golem options\n)\n\n## Install the required dev dependencies ----\ngolem::install_dev_deps()\n\n## Create Common Files ----\n## See ?usethis for more information\nusethis::use_mit_license(\"Golem User\") # You can set another license here\ngolem::use_readme_rmd(open = FALSE)\ndevtools::build_readme()\n# Note that `contact` is required since usethis version 2.1.5\n# If your {usethis} version is older, you can remove that param\nusethis::use_code_of_conduct(contact = \"Golem User\")\nusethis::use_lifecycle_badge(\"Experimental\")\nusethis::use_news_md(open = FALSE)\n\n## Init Testing Infrastructure ----\n## Create a template for tests\ngolem::use_recommended_tests()\n\n## Favicon ----\n# If you want to change the favicon (default is golem's one)\ngolem::use_favicon() # path = \"path/to/ico\". Can be an online file.\n# golem::remove_favicon() # Uncomment to remove the default favicon\n\n## Add helper functions ----\ngolem::use_utils_ui(with_test = TRUE)\ngolem::use_utils_server(with_test = TRUE)\n\n## Use git ----\nusethis::use_git()\n## Sets the remote associated with 'name' to 'url'\nusethis::use_git_remote(\n  name = \"origin\",\n  url = \"https://github.com/<OWNER>/<REPO>.git\"\n)\n\n# You're now set! ----\n\n# go to dev/02_dev.R\nrstudioapi::navigateToFile(\"dev/02_dev.R\")\n","type":"text"},{"name":"dev/02_dev.R","content":"# Building a Prod-Ready, Robust Shiny Application.\n#\n# README: each step of the dev files is optional, and you don't have to\n# fill every dev scripts before getting started.\n# 01_start.R should be filled at start.\n# 02_dev.R should be used to keep track of your development during the project.\n# 03_deploy.R should be used once you need to deploy your app.\n#\n#\n###################################\n#### CURRENT FILE: DEV SCRIPT #####\n###################################\n\n# Engineering\n\n## Dependencies ----\n## Amend DESCRIPTION with dependencies read from package code parsing\n## install.packages('attachment') # if needed.\nattachment::att_amend_desc()\n\n## Add modules ----\n## Create a module infrastructure in R/\ngolem::add_module(name = \"name_of_module1\", with_test = TRUE) # Name of the module\ngolem::add_module(name = \"name_of_module2\", with_test = TRUE) # Name of the module\n\n## Add helper functions ----\n## Creates fct_* and utils_*\ngolem::add_fct(\"helpers\", with_test = TRUE)\ngolem::add_utils(\"helpers\", with_test = TRUE)\n\n## External resources\n## Creates .js and .css files at inst/app/www\ngolem::add_js_file(\"script\")\ngolem::add_js_handler(\"handlers\")\ngolem::add_css_file(\"custom\")\ngolem::add_sass_file(\"custom\")\ngolem::add_any_file(\"file.json\")\n\n## Add internal datasets ----\n## If you have data in your package\nusethis::use_data_raw(name = \"my_dataset\", open = FALSE)\n\n## Tests ----\n## Add one line by test you want to create\nusethis::use_test(\"app\")\n\n# Documentation\n\n## Vignette ----\nusethis::use_vignette(\"diag\")\ndevtools::build_vignettes()\n\n## Code Coverage----\n## Set the code coverage service (\"codecov\" or \"coveralls\")\nusethis::use_coverage()\n\n# Create a summary readme for the testthat subdirectory\ncovrpage::covrpage()\n\n## CI ----\n## Use this part of the script if you need to set up a CI\n## service for your application\n##\n## (You'll need GitHub there)\nusethis::use_github()\n\n# GitHub Actions\nusethis::use_github_action()\n# Chose one of the three\n# See https://usethis.r-lib.org/reference/use_github_action.html\nusethis::use_github_action_check_release()\nusethis::use_github_action_check_standard()\nusethis::use_github_action_check_full()\n# Add action for PR\nusethis::use_github_action_pr_commands()\n\n# Circle CI\nusethis::use_circleci()\nusethis::use_circleci_badge()\n\n# Jenkins\nusethis::use_jenkins()\n\n# GitLab CI\nusethis::use_gitlab_ci()\n\n# You're now set! ----\n# go to dev/03_deploy.R\nrstudioapi::navigateToFile(\"dev/03_deploy.R\")\n","type":"text"},{"name":"dev/03_deploy.R","content":"# Building a Prod-Ready, Robust Shiny Application.\n#\n# README: each step of the dev files is optional, and you don't have to\n# fill every dev scripts before getting started.\n# 01_start.R should be filled at start.\n# 02_dev.R should be used to keep track of your development during the project.\n# 03_deploy.R should be used once you need to deploy your app.\n#\n#\n######################################\n#### CURRENT FILE: DEPLOY SCRIPT #####\n######################################\n\n# Test your app\n\n## Run checks ----\n## Check the package before sending to prod\ndevtools::check()\nrhub::check_for_cran()\n\n# Deploy\n\n## Local, CRAN or Package Manager ----\n## This will build a tar.gz that can be installed locally,\n## sent to CRAN, or to a package manager\ndevtools::build()\n\n## Docker ----\n## If you want to deploy via a generic Dockerfile\ngolem::add_dockerfile_with_renv()\n## If you want to deploy to ShinyProxy\ngolem::add_dockerfile_with_renv_shinyproxy()\n\n## Posit ----\n## If you want to deploy on Posit related platforms\ngolem::add_positconnect_file()\ngolem::add_shinyappsio_file()\ngolem::add_shinyserver_file()\n\n## Deploy to Posit Connect or ShinyApps.io ----\n\n## Add/update manifest file (optional; for Git backed deployment on Posit )\nrsconnect::writeManifest()\n\n## In command line.\nrsconnect::deployApp(\n  appName = desc::desc_get_field(\"Package\"),\n  appTitle = desc::desc_get_field(\"Package\"),\n  appFiles = c(\n    # Add any additional files unique to your app here.\n    \"R/\",\n    \"inst/\",\n    \"data/\",\n    \"NAMESPACE\",\n    \"DESCRIPTION\",\n    \"app.R\"\n  ),\n  appId = rsconnect::deployments(\".\")$appID,\n  lint = FALSE,\n  forceUpdate = TRUE\n)\n","type":"text"},{"name":"dev/run_dev.R","content":"# Set options here\noptions(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode\n\n# Comment this if you don't want the app to be served on a random port\noptions(shiny.port = httpuv::randomPort())\n\n# Detach all loaded packages and clean your environment\ngolem::detach_all_attached()\n# rm(list=ls(all.names = TRUE))\n\n# Document and reload your package\ngolem::document_and_reload()\n\n# Run the application\nrun_app()\n","type":"text"},{"name":"inst/WORDLIST","content":"golem\n","type":"text"},{"name":"inst/app/www/favicon.ico","content":"AAABAAEAHCAAAAEAIACoDgAAFgAAACgAAAAcAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE9COAAAAAAAAAAAAFFE\nOQRPQTUkTUA4rkxAOKpOQTUhUkQ5BAAAAAAAAAAAT0I4AAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT0I4AE9COAAAAAAAAAAAAFZG\nOCJNPy9+Qjs//S86af81P2r/Rj5A+0s9L3xWRzghAAAAAAAAAABPQjgAT0I4AAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT0I4AAAAAAAAAAAAV0g9FlVE\nMHFBNy/bMz1o/x9Dsf8kWPf/Pmz4/0hhtP9ESmj/PTMt2VZFMnBWSD0WAAAAAAAAAABPQjgA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT0I4AAAAAAAAAAAAVkY3X0k6\nJ8kzNUv/Jkat/x5P4/8iV/j/IVXx/yZY8v83Z/r/N2Lk/0phrf8yMkP/SjsnyFVGOF4AAAAA\nAAAAAE9COAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPQjgAAAAAAAAAAABSRDorUEIzxTkz\nNvghQJ7/KE3D/yNV7v8iVfL/IlXx/yJV8f8iVfH/IlXx/yNW8v83ZO//KEy+/yI+lf88NDP4\nUUI0xVFDOSwAAAAAAAAAAE9COAAAAAAAAAAAAAAAAAAAAAAAAAAAAE9CNw1PQjiURzw0/yQy\nav8dTeD/Ilb3/yxSyv8jVe3/IlXx/yJV8f8iVfH/IlXx/yJV8f8iVfH/I1Tt/ytSzf8iV/j/\nHEvZ/yYyXf9KPjb/T0I4l1BCNw4AAAAAAAAAAAAAAAAAAAAATUI3Eks+MV1HPj3nMDRR/x9B\nrf8kWPf/I1Xw/yVU5P8wULn/J1Pe/yRU6f8iVfP/IlXx/yJV8f8iVfP/I1Tq/ztby/9fYY//\nLFbd/yJV8f8kWPr/Hz2Z/zI1T/9JPzzqSz4xYExBNxQAAAAAT0I4TVJCN7pDPlD/Hz6g/yBU\n9f8mVeb/KlLT/ypS0v8oU9r/IVX0/ylT1v8qUtD/KVLX/yNV7f8jVOz/KVLW/yZR1f+uiWj/\n3qRa/25tmP8lUNX/KlLR/yVW6/8fU/D/ID2Z/0hATv9VRDi/T0I4T1NEOvSLXVT/Sk6U/x5X\n/f8iVfL/IlXy/yNV7v8rUtD/IVX2/yJV8f8hVfP/Ilbx/y9Qvv8oU9n/KFPZ/y9QvP8hVPH/\nZm+0/5qHjf9DZNz/KVDN/yNV7f8iVfL/IlXy/x1V+/9UUZH/jl9U/1NEOvJVRTv/r29n/1RS\nlf8eVfj/IlXx/yJV8f8jVvD/KFTd/yJW9P8iVfH/IlXx/yJW9P8qUtH/I1Xu/yNV7/8rUc3/\nIlXy/yRV7/8tWOX/IVb0/ypT1/8kVe7/IlXx/yJV8f8aUOz/X1WN/7Jxaf9URTv9VEU7/7p3\nb/9zWXr/G0rV/yJW8/8iVfP/HUW+/zA/iv8dUOb/Ilbz/yFV8/8qUtH/JlPg/yJV8/8hVfP/\nKFLZ/ylT1f8hVfP/Ilbz/x1O4f8wPYT/IErM/yJV8/8iVvT/IUrN/39bcf+5dm//VEU7/FRF\nO/+4d3H/t3Np/29RZ/8sR6//R0V4/6loW/+4dGn/XEts/ydMxf8tUcn/I1Ts/yJV8v8iVfH/\nIlXx/yFV8/8lVOb/LFHK/yhNwv9iTWn/u3Vq/5xiV/8/Q4H/Lkao/3pVYv+7dm3/tXVw/1RF\nO/1URTv/t3Zx/7l3cv/AenL/sG5g/8J6cP+6d3L/vXlz/4xZVP8sQ6L/IVTx/yJV8v8iVfP/\nIlXy/yFV8/8iVfP/IlXy/yBU8f8yRZ3/m2FW/7t4c/+7eHP/wXlu/7NvYv+/enP/uXZy/7V1\ncP9URTv9VEU7/7d2cf+5dnH/uHZx/7l3cv+4dnH/uHZx/7t4cv+ZYl3/KTRy/yBS6f8iVfH/\nIE7b/yVU4v8mU9r/IE7d/yJV8v8fUef/MjRm/7JwZ/+5d3L/uHZx/7h2cf+5d3L/uHZx/7l2\ncf+2dXD/VEU7/lRFO/+3dXH/uXZx/7h2cf+4dnH/uHZx/7h2cf+4dnH/vXhu/zczWf8fUOX/\nIlHj/1pief9HXaD/V22v/0hak/8gT97/IlLl/1M/Vv/BenL/uHZx/7h2cf+4dnH/uHZx/7h2\ncf+5dnH/tnVw/1RFO/5URTv+tnVx/7l2cf+4dnH/uHZx/7h2cf+4dnH/uHZx/8J8df9EMTv/\nIVHm/x5Jzv8cO5v/H0bB/yBIwf8aO5//IVDj/yRT5v9kQkD/wHp0/7h2cf+4dnH/uHZx/7h2\ncf+4dnH/uXZx/7Z1cP9URTv+VEU7/rZ1cP+5dnH/uHZx/7h2cf+4dnH/uHZx/7h2cf+/enX/\na0M9/yVAov8iVvT/Ilb0/yJW8/8iVvP/Ilb0/yJV8/8jOIr/h1ZR/715c/+4dnH/uHZx/7h2\ncf+4dnH/uHZx/7l2cf+2dXH/VEU7/lRFO/62dXD/uXZx/7h2cf+4dnH/uHZx/7h2cf+4dnH/\nt3Zx/8N9dv+EVlb/IEzU/yFW9/8iVvP/Ilbz/yBW9/8kSML/mmFZ/8B7df+4dnH/uHZx/7h2\ncf+4dnH/uHZx/7h2cf+5dnH/t3Vx/1RFO/9URTv+tnVw/7l2cf+4dnH/uHZx/7h2cf+4dnH/\nuHZx/7h2cf+4dnH/v3px/2hQbf8mSL3/FEXS/xhHz/8vSbH/fVdl/796c/+4dnH/uHZx/7h2\ncf+4dnH/uHZx/7h2cf+4dnH/uXZx/7d1cf9URTv/VEU7/bZ2cP+5dnH/uHZx/7h2cf+4dnH/\nuHZx/7h2cf+4dnH/uHZx/7h2cf+4dW7/k2Rt/4Zjf/+JZH3/mmZo/7t3cf+4dnH/uHZx/7h2\ncf+4dnH/uHZx/7h2cf+4dnH/uHZx/7l2cf+3dnH/VEU7/1RFO/21dXD/uXZx/7h2cf+4dnH/\nuHZx/7h2cf+4dnH/t3Nu/7dzbv+4dnH/uHZx/7l3cf+6d3D/undw/7l2cf+4dnH/uHZx/7h2\ncf+4dnH/uHZx/7h2cf+4dnH/uHZx/7h2cf+5dnH/uHZx/1RFO/9URTv8tXVw/7l2cf+4dnH/\nuHZx/7h2cf+4dnH/vX96/9CjoP/Sp6X/unp1/7x/ev+4d3L/uXdy/7p4c/+8fXj/uHZx/7l4\nc/+4d3L/uXdy/7l3cv+4dnH/uHZx/7h2cf+4dnH/uXZx/7h2cf9URTv/VEU7/bZ1cf+5d3L/\nuHZx/7h2cf+4dnH/uHVw/8OLh//WsKz/2ri0/9q3tP/On5z/3Lu4/9Gmov/SqKb/1rGt/8CE\ngP/Uq6j/y5qW/9Clov/EjYn/uHVw/7h2cf+4dnH/uHZx/7l2cv+5d3L/VEU7/1JEOvOWZV//\nt3Zw/7t3cv+4dnH/uHZx/7h1cP/Diob/zZ2a/9Oppf/Xsa//woqG/9izsP/Sp6T/0KWh/9m2\ntP/CiIT/2LSy/9Clov/SqKb/woqG/7h1cP+4dnH/uHZx/7t3cv+2dXD/l2Zf/1NEOvRPQjhQ\nV0Y8v3RVTP+kbGb/vHhz/7l2cf+4dnH/u3t2/8OLhv/CioX/v4J+/8SNif/EjIj/zJuY/76A\nfP/Fjov/uXdy/8aRjf/Ejor/w4qG/7t8d/+4dnH/uXZx/7x4c/+ja2b/dFRM/1ZGPLtPQjhO\nAAAAAEc+NBROQjhgWEY96nxZUf+3dXD/u3hz/7h2cf+3dXD/uHVw/7h1cP+3dXD/uXdy/7t8\nd/+3dXD/t3Vw/7h2cf+3dXD/t3Vw/7d1cP+4dnH/u3hz/7Z1cP97WFH/WEY86E5COF1HPjMS\nAAAAAAAAAAAAAAAAAAAAAE5BNw5PQjiXVkY8/5JjXP+7eHP/uHZx/7h2cf+4dnH/uHZx/7h2\ncf+4dnH/uHZx/7h2cf+4dnH/uHZx/7h2cf+4dnH/u3hz/5JjXP9WRjz/T0I4lU5BNwwAAAAA\nAAAAAAAAAAAAAAAAAAAAAE9COAAAAAAAAAAAAE1BNyxMQDbDaU5G+KJsZf+2dXD/uXZx/7h2\ncf+4dnH/uHZx/7h2cf+4dnH/uHZx/7l2cf+2dXD/o2xl/2lORvhMQDbDTUE3KwAAAAAAAAAA\nT0I4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE9COAAAAAAAAAAAAEY+M19RQznIfllS/qNs\nZv+6d3L/uXdy/7h2cf+4dnH/uXdy/7p3cv+jbGb/fllS/lFDOclGPjNfAAAAAAAAAABPQjgA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT0I4AAAAAAAAAAAARz40FkI8\nMm9fSkHYf1pS/6pvav++eXT/vnl0/6twav+BW1P/YEpB2kI8MnFHPjMWAAAAAAAAAABPQjgA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABPQjgAT0I4AAAA\nAAAAAAAARj0zIU5COHthS0L7hl1W/4hfV/9iS0L+TkI4f0Y9MyIAAAAAAAAAAAAAAABPQjgA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAABPQjgAAAAAAAAAAABMQTcETkE3IFJDOqpSRDquTkI3IkxBNgQAAAAAAAAAAE9COAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/gf/D/wD/w/wAP8P4AB/D4AAHw4AAAcIAA\nABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAQ4AAAcPgAAfD+AAfw/wAP8P/AP/D/4H/w","type":"binary"},{"name":"inst/golem-config.yml","content":"default:\n  golem_name: diag\n  golem_version: 0.0.0.9000\n  app_prod: no\n\nproduction:\n  app_prod: yes\n\ndev:\n  golem_wd: !expr golem::pkg_path()\n\n","type":"text"},{"name":"man/run_app.Rd","content":"% Generated by roxygen2: do not edit by hand\n% Please edit documentation in R/run_app.R\n\\name{run_app}\n\\alias{run_app}\n\\title{Run the Shiny Application}\n\\usage{\nrun_app(\n  onStart = NULL,\n  options = list(),\n  enableBookmarking = NULL,\n  uiPattern = \"/\",\n  ...\n)\n}\n\\arguments{\n\\item{onStart}{A function that will be called before the app is actually run.\nThis is only needed for \\code{shinyAppObj}, since in the \\code{shinyAppDir}\ncase, a \\code{global.R} file can be used for this purpose.}\n\n\\item{options}{Named options that should be passed to the \\code{runApp} call\n(these can be any of the following: \"port\", \"launch.browser\", \"host\", \"quiet\",\n\"display.mode\" and \"test.mode\"). You can also specify \\code{width} and\n\\code{height} parameters which provide a hint to the embedding environment\nabout the ideal height/width for the app.}\n\n\\item{enableBookmarking}{Can be one of \\code{\"url\"}, \\code{\"server\"}, or\n\\code{\"disable\"}. The default value, \\code{NULL}, will respect the setting from\nany previous calls to  \\code{\\link[shiny:enableBookmarking]{enableBookmarking()}}. See \\code{\\link[shiny:enableBookmarking]{enableBookmarking()}}\nfor more information on bookmarking your app.}\n\n\\item{uiPattern}{A regular expression that will be applied to each \\code{GET}\nrequest to determine whether the \\code{ui} should be used to handle the\nrequest. Note that the entire request path must match the regular\nexpression in order for the match to be considered successful.}\n\n\\item{...}{arguments to pass to golem_opts.\nSee `?golem::get_golem_options` for more details.}\n}\n\\description{\nRun the Shiny Application\n}\n","type":"text"},{"name":"tests/spelling.R","content":"if(requireNamespace('spelling', quietly = TRUE))\n  spelling::spell_check_test(vignettes = TRUE, error = FALSE,\n                             skip_on_cran = TRUE)\n","type":"text"},{"name":"tests/testthat/test-golem-recommended.R","content":"test_that(\"app ui\", {\n  ui <- app_ui()\n  golem::expect_shinytaglist(ui)\n  # Check that formals have not been removed\n  fmls <- formals(app_ui)\n  for (i in c(\"request\")) {\n    expect_true(i %in% names(fmls))\n  }\n})\n\ntest_that(\"app server\", {\n  server <- app_server\n  expect_type(server, \"closure\")\n  # Check that formals have not been removed\n  fmls <- formals(app_server)\n  for (i in c(\"input\", \"output\", \"session\")) {\n    expect_true(i %in% names(fmls))\n  }\n})\n\ntest_that(\n  \"app_sys works\",\n  {\n    expect_true(\n      app_sys(\"golem-config.yml\") != \"\"\n    )\n  }\n)\n\ntest_that(\n  \"golem-config works\",\n  {\n    config_file <- app_sys(\"golem-config.yml\")\n    skip_if(config_file == \"\")\n\n    expect_true(\n      get_golem_config(\n        \"app_prod\",\n        config = \"production\",\n        file = config_file\n      )\n    )\n    expect_false(\n      get_golem_config(\n        \"app_prod\",\n        config = \"dev\",\n        file = config_file\n      )\n    )\n  }\n)\n\n# Configure this test to fit your need.\n# testServer() function makes it possible to test code in server functions and modules, without needing to run the full Shiny application\ntestServer(app_server, {\n\n  # Set and test an input\n  session$setInputs(x = 2)\n  expect_equal(input$x, 2)\n\n  # Example of tests you can do on the server:\n  # - Checking reactiveValues\n  # expect_equal(r$lg, 'EN')\n  # - Checking output\n  # expect_equal(output$txt, \"Text\")\n})\n\n# Configure this test to fit your need\ntest_that(\n  \"app launches\",\n  {\n    golem::expect_running(sleep = 5)\n  }\n)\n","type":"text"},{"name":"tests/testthat.R","content":"# This file is part of the standard setup for testthat.\n# It is recommended that you do not modify it.\n#\n# Where should you do additional test configuration?\n# Learn more about the roles of various files in:\n# * https://r-pkgs.org/testing-design.html#sec-tests-files-overview\n# * https://testthat.r-lib.org/articles/special-files.html\n\nlibrary(testthat)\nlibrary(diag)\n\ntest_check(\"diag\")\n","type":"text"}]
